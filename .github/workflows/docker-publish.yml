name: CI/CD for Docker Images with Health Check

on:
  push:
    branches:
      - master  

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v2

      # Шаг 2: Логин в DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Шаг 3: Построение weatherservice
      - name: Build weatherservice
        run: |
          docker build -t dorilann/weatherservicetest:latest ./WeatherServiceTest

      # Шаг 4: Запуск weatherservice и проверка доступности через curl
      - name: Run weatherservice and check health
        run: |
          docker run -d -p 8000:8080 --name weatherservice dorilann/weatherservicetest:latest
          sleep 10  # Даем контейнеру время на старт
          until curl --retry 5 --retry-connrefused --retry-delay 5 --fail http://localhost:8000/api/Health/HealthCheck; do
            echo "Waiting for weatherservice to be ready..."
            sleep 5
          done

      # Шаг 5: Пуш weatherservice
      - name: Push weatherservice
        run: |
          docker push dorilann/weatherservicetest:latest

      # Шаг 6: Построение storageservice
      - name: Build storageservice
        run: |
          docker build -t dorilann/storageservice:latest ./StorageService

      # Шаг 7: Запуск storageservice и проверка доступности через curl
      - name: Run storageservice and check health
        run: |
          docker run -d -p 8001:8080 --name storageservice dorilann/storageservice:latest
          sleep 10  # Даем контейнеру время на старт
          until curl --retry 5 --retry-connrefused --retry-delay 5 --fail http://localhost:8001/api/Health/HealthCheck; do
            echo "Waiting for storageservice to be ready..."
            sleep 5
          done

      # Шаг 8: Пуш storageservice
      - name: Push storageservice
        run: |
          docker push dorilann/storageservice:latest

      # Шаг 9: Построение apigateway
      - name: Build apigateway
        run: |
          docker build -t dorilann/apigateway:latest ./ApiGateway

      # Шаг 10: Запуск apigateway и проверка доступности через curl
      - name: Run apigateway and check health
        run: |
          docker run -d -p 8082:8080 --name apigateway dorilann/apigateway:latest
          sleep 10  # Даем контейнеру время на старт
          until curl --retry 5 --retry-connrefused --retry-delay 5 --fail http://localhost:8082/api/Health/HealthCheck; do
            echo "Waiting for apigateway to be ready..."
            sleep 5
          done

      # Шаг 11: Пуш apigateway
      - name: Push apigateway
        run: |
          docker push dorilann/apigateway:latest
